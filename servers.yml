Description: >
  Author: Redarokim Ikongha
  This CloudFormation template provisions the infrastructure for the Udacity ND Udargam project(load balancer, auto scaling group, bastion host, associated roles, etc.).

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String
    Default: UdagramProject

  BastionHostAMI:
    Description: The machine image to be used for bastion host.
    Type: String
    Default: ami-052efd3df9dad4825

  BastionHostInstanceType:
    Description: The bastion host EC2 instance type to be used. 
    Type: String
    Default: t2.micro

  BastionHostKeyName:
    Description: Name of an existing KeyPair to enable SSH access to the web servers from bastion host.
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: MyUdacityEC2Workspace

  MyLocalHostIP:
    Description: The IP of the local host that is used to SSH to bastion host.
    Type: String
    Default: 197.255.22.46/32

  WebServerAMI:
    Description: The machine image to be used for web servers.
    Type: String
    Default: ami-0729e439b6769d6ab
  
  WebServerInstanceType:
    Description: The web server EC2 instance type to be used. 
    Type: String
    Default: t3.medium


Resources:
  BastionHostFullSSM:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  
  ProfileWithRolesForBastion:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref BastionHostFullSSM
  
  BastionHostSecGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Allow SSH access via port 22 to web servers"
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"  
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyLocalHostIP

  BastionHost1: 
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref BastionHostAMI 
      InstanceType: !Ref BastionHostInstanceType
      IamInstanceProfile: !Ref ProfileWithRolesForBastion
      SecurityGroupIds: 
        - !Ref BastionHostSecGroup
      KeyName: !Ref BastionHostKeyName
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip python3-pip apache2 awscli -y
          systemctl start apache2.service
          snap start amazon-ssm-agent
          pip3 install --upgrade awscli
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          dpkg -i session-manager-plugin.deb
    DependsOn:
      - BastionHostSecGroup
      - ProfileWithRolesForBastion

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"      

  EIPAssociation1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId:
        Ref: BastionHost1
      AllocationId: !GetAtt EIP1.AllocationId
    DependsOn:
      - BastionHost1
      - EIP1

  BastionHost2: 
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref BastionHostAMI 
      InstanceType: !Ref BastionHostInstanceType
      IamInstanceProfile: !Ref ProfileWithRolesForBastion
      SecurityGroupIds: 
        - !Ref BastionHostSecGroup
      KeyName: !Ref BastionHostKeyName
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip python3-pip apache2 awscli -y
          systemctl start apache2.service
          snap start amazon-ssm-agent
          pip3 install --upgrade awscli
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          dpkg -i session-manager-plugin.deb
    DependsOn:
      - BastionHostSecGroup
      - ProfileWithRolesForBastion

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"      

  EIPAssociation2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId:
        Ref: BastionHost2
      AllocationId: !GetAtt EIP2.AllocationId
    DependsOn:
      - BastionHost2
      - EIP2
  UdacityS3ReadOnlyEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2

# Load balancer security group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to the load balancer.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to web servers and SSH from the bastion host only.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  # Autoscaling settings
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups: 
        - !Ref LBSecGroup

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
    DependsOn:
      - WebAppLB

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP
    DependsOn:
      - WebAppLB
      - WebAppTargetGroup

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs: 
        - !Ref WebAppTargetGroup

  # Launch configurations
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip python3-pip apache2 awscli -y
          systemctl start apache2.service
          pip3 install --upgrade awscli
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref WebServerAMI
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups: 
        - !Ref WebServerSecGroup
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

Outputs:
  BastionHost1CIDR:
    Description: A reference to the Bastion Host 1 CIDR.
    Value: 
      !Join
        - ''
        - - !GetAtt BastionHost1.PrivateIp
          - !Sub '/32'
    Export:
        Name: !Sub ${EnvironmentName}-BASTION-HOST-1-CIDR

  BastionHost2CIDR:
    Description: A reference to the Bastion Host 2 CIDR.
    Value: 
      !Join
        - ''
        - - !GetAtt BastionHost2.PrivateIp
          - !Sub '/32'
    Export:
        Name: !Sub ${EnvironmentName}-BASTION-HOST-2-CIDR

  WebAppLB:
    Description: The public URL of web application. 
    Value: 
      !Join
        - ''
        - - 'http://'
          - !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-WEB-APP-URL